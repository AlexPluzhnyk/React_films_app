{"ast":null,"code":"import { API_BASE, KEY, SEARCH_API } from \"./paths\";\nimport { FILTER_NAMES } from \"../store/films/constants\";\nconst filtersParser = {\n  [FILTER_NAMES.GENRE]: value => {\n    if (value.length) {\n      return `${FILTER_NAMES.GENRE}=${value}`;\n    }\n  },\n  [FILTER_NAMES.RATING_USERS]: value => {\n    if (value) {\n      return `${FILTER_NAMES.RATING_FROM}=${value.from}&${FILTER_NAMES.RATING_TO}=${value.to}`;\n    }\n  },\n  [FILTER_NAMES.RELEASE_FILMS]: value => {\n    const [from, to] = value;\n\n    if (from && to) {\n      return `${FILTER_NAMES.RELEASE_FROM}=${from}&${FILTER_NAMES.RELEASE_TO}=${to}`;\n    }\n  },\n  [FILTER_NAMES.PAGE]: value => {\n    if (value) {\n      return `${FILTER_NAMES.PAGE}=${value}`;\n    }\n  },\n  [FILTER_NAMES.SORT_BY]: value => {\n    if (value) {\n      return `${FILTER_NAMES.SORT_BY}=${value}`;\n    }\n  }\n};\n\nconst getSearchQuery = (searchWord, page) => {\n  const SEARCH_URL = `${SEARCH_API}${KEY}&query=${searchWord}`;\n  const PAGE_PARAM = filtersParser[FILTER_NAMES.PAGE](page);\n  return `${SEARCH_URL}&${PAGE_PARAM}`;\n};\n\nconst getFilterQuery = filters => {\n  let query = API_BASE + `discover/movie?${KEY}`;\n  const filterList = Object.entries(filters);\n  filterList.forEach(_ref => {\n    let [key, value] = _ref;\n    const parsedParam = filtersParser[key](value);\n\n    if (parsedParam) {\n      query = `${query}&${parsedParam}`;\n    }\n  });\n  return query;\n};\n\nconst queryBuilder = (filters, searchWord) => {\n  const query = searchWord ? getSearchQuery(searchWord, filters[FILTER_NAMES.PAGE]) : getFilterQuery(filters);\n  return query;\n};\n\nexport default queryBuilder;","map":{"version":3,"sources":["/Users/alex/Documents/reactModul/React_films_app/src/api/queryBuilder.js"],"names":["API_BASE","KEY","SEARCH_API","FILTER_NAMES","filtersParser","GENRE","value","length","RATING_USERS","RATING_FROM","from","RATING_TO","to","RELEASE_FILMS","RELEASE_FROM","RELEASE_TO","PAGE","SORT_BY","getSearchQuery","searchWord","page","SEARCH_URL","PAGE_PARAM","getFilterQuery","filters","query","filterList","Object","entries","forEach","key","parsedParam","queryBuilder"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,GAAnB,EAAwBC,UAAxB,QAA0C,SAA1C;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,MAAMC,aAAa,GAAG;AACpB,GAACD,YAAY,CAACE,KAAd,GAAuBC,KAAD,IAAW;AAC/B,QAAIA,KAAK,CAACC,MAAV,EAAkB;AAChB,aAAQ,GAAEJ,YAAY,CAACE,KAAM,IAAGC,KAAM,EAAtC;AACD;AACF,GALmB;AAMpB,GAACH,YAAY,CAACK,YAAd,GAA8BF,KAAD,IAAW;AACtC,QAAIA,KAAJ,EAAW;AACT,aAAQ,GAAEH,YAAY,CAACM,WAAY,IAAGH,KAAK,CAACI,IAAK,IAAGP,YAAY,CAACQ,SAAU,IAAGL,KAAK,CAACM,EAAG,EAAvF;AACD;AACF,GAVmB;AAWpB,GAACT,YAAY,CAACU,aAAd,GAA+BP,KAAD,IAAW;AACvC,UAAM,CAACI,IAAD,EAAOE,EAAP,IAAaN,KAAnB;;AAEA,QAAII,IAAI,IAAIE,EAAZ,EAAgB;AACd,aAAQ,GAAET,YAAY,CAACW,YAAa,IAAGJ,IAAK,IAAGP,YAAY,CAACY,UAAW,IAAGH,EAAG,EAA7E;AACD;AACF,GAjBmB;AAkBpB,GAACT,YAAY,CAACa,IAAd,GAAsBV,KAAD,IAAW;AAC9B,QAAIA,KAAJ,EAAW;AACT,aAAQ,GAAEH,YAAY,CAACa,IAAK,IAAGV,KAAM,EAArC;AACD;AACF,GAtBmB;AAuBpB,GAACH,YAAY,CAACc,OAAd,GAAyBX,KAAD,IAAW;AACjC,QAAIA,KAAJ,EAAW;AACT,aAAQ,GAAEH,YAAY,CAACc,OAAQ,IAAGX,KAAM,EAAxC;AACD;AACF;AA3BmB,CAAtB;;AA8BA,MAAMY,cAAc,GAAG,CAACC,UAAD,EAAaC,IAAb,KAAsB;AAC3C,QAAMC,UAAU,GAAI,GAAEnB,UAAW,GAAED,GAAI,UAASkB,UAAW,EAA3D;AACA,QAAMG,UAAU,GAAGlB,aAAa,CAACD,YAAY,CAACa,IAAd,CAAb,CAAiCI,IAAjC,CAAnB;AAEA,SAAQ,GAAEC,UAAW,IAAGC,UAAW,EAAnC;AACD,CALD;;AAOA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAClC,MAAIC,KAAK,GAAGzB,QAAQ,GAAI,kBAAiBC,GAAI,EAA7C;AAEA,QAAMyB,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAeJ,OAAf,CAAnB;AAEAE,EAAAA,UAAU,CAACG,OAAX,CAAmB,QAAkB;AAAA,QAAjB,CAACC,GAAD,EAAMxB,KAAN,CAAiB;AACnC,UAAMyB,WAAW,GAAG3B,aAAa,CAAC0B,GAAD,CAAb,CAAmBxB,KAAnB,CAApB;;AAEA,QAAIyB,WAAJ,EAAiB;AACfN,MAAAA,KAAK,GAAI,GAAEA,KAAM,IAAGM,WAAY,EAAhC;AACD;AACF,GAND;AAQA,SAAON,KAAP;AACD,CAdD;;AAgBA,MAAMO,YAAY,GAAG,CAACR,OAAD,EAAUL,UAAV,KAAyB;AAC5C,QAAMM,KAAK,GAAGN,UAAU,GACpBD,cAAc,CAACC,UAAD,EAAaK,OAAO,CAACrB,YAAY,CAACa,IAAd,CAApB,CADM,GAEpBO,cAAc,CAACC,OAAD,CAFlB;AAIA,SAAOC,KAAP;AACD,CAND;;AAQA,eAAeO,YAAf","sourcesContent":["import { API_BASE, KEY, SEARCH_API } from \"./paths\";\nimport { FILTER_NAMES } from \"../store/films/constants\";\n\nconst filtersParser = {\n  [FILTER_NAMES.GENRE]: (value) => {\n    if (value.length) {\n      return `${FILTER_NAMES.GENRE}=${value}`;\n    }\n  },\n  [FILTER_NAMES.RATING_USERS]: (value) => {\n    if (value) {\n      return `${FILTER_NAMES.RATING_FROM}=${value.from}&${FILTER_NAMES.RATING_TO}=${value.to}`;\n    }\n  },\n  [FILTER_NAMES.RELEASE_FILMS]: (value) => {\n    const [from, to] = value;\n\n    if (from && to) {\n      return `${FILTER_NAMES.RELEASE_FROM}=${from}&${FILTER_NAMES.RELEASE_TO}=${to}`;\n    }\n  },\n  [FILTER_NAMES.PAGE]: (value) => {\n    if (value) {\n      return `${FILTER_NAMES.PAGE}=${value}`;\n    }\n  },\n  [FILTER_NAMES.SORT_BY]: (value) => {\n    if (value) {\n      return `${FILTER_NAMES.SORT_BY}=${value}`;\n    }\n  },\n};\n\nconst getSearchQuery = (searchWord, page) => {\n  const SEARCH_URL = `${SEARCH_API}${KEY}&query=${searchWord}`;\n  const PAGE_PARAM = filtersParser[FILTER_NAMES.PAGE](page);\n\n  return `${SEARCH_URL}&${PAGE_PARAM}`;\n};\n\nconst getFilterQuery = (filters) => {\n  let query = API_BASE + `discover/movie?${KEY}`;\n\n  const filterList = Object.entries(filters);\n\n  filterList.forEach(([key, value]) => {\n    const parsedParam = filtersParser[key](value);\n\n    if (parsedParam) {\n      query = `${query}&${parsedParam}`;\n    }\n  });\n\n  return query;\n};\n\nconst queryBuilder = (filters, searchWord) => {\n  const query = searchWord\n    ? getSearchQuery(searchWord, filters[FILTER_NAMES.PAGE])\n    : getFilterQuery(filters);\n\n  return query;\n};\n\nexport default queryBuilder;\n"]},"metadata":{},"sourceType":"module"}