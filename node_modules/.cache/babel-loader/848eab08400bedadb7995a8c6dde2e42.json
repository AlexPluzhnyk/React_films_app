{"ast":null,"code":"import { API_BASE, KEY } from \"../../api/paths\";\nimport { URL_ACTORS } from \"./constants\";\nimport * as ACTORS_ACTION_TYPES from \"./types\";\n\nconst fetchActorsStart = () => ({\n  type: ACTORS_ACTION_TYPES.FETCH_ACTORS_START\n});\n\nconst fetchActorsFailed = error => ({\n  type: ACTORS_ACTION_TYPES.FETCH_ACTORS_FAILURE,\n  payload: error\n});\n\nconst fetchActorsSuccess = actors => ({\n  type: ACTORS_ACTION_TYPES.FETCH_ACTORS_SUCCESS,\n  payload: actors\n});\n\nconst actorDescription = actor => ({\n  type: ACTORS_ACTION_TYPES.GET_ACTOR_DESCRIPTION,\n  payload: actor\n});\n\nexport const setQueryWord = query => ({\n  type: ACTORS_ACTION_TYPES.SET_QUERY_WORD,\n  payload: query\n});\nexport const changePage = page => ({\n  type: ACTORS_ACTION_TYPES.CHANGE_PAGE,\n  payload: page\n});\nexport const fetchActors = () => async (dispatch, getState) => {\n  const {\n    actorsReducer: {\n      page\n    }\n  } = getState();\n  dispatch(fetchActorsStart());\n  const url = `${URL_ACTORS}${KEY}&page=${page}`;\n  const response = await fetch(url);\n\n  try {\n    if (response.ok) {\n      const {\n        results,\n        total_pages\n      } = await response.json();\n      dispatch(fetchActorsSuccess({\n        allActors: results,\n        totalPages: total_pages\n      }));\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n    dispatch(fetchActorsFailed(\"Failed to load films!\"));\n  }\n};\nexport const fetchActorAbout = param => async (dispatch, getState) => {\n  dispatch(fetchActorsStart());\n  const url = `${API_BASE}person/${param}?${KEY}`;\n  const response = await fetch(url);\n\n  try {\n    if (response.ok) {\n      const data = await response.json();\n      dispatch(actorDescription(data));\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n  }\n};\nexport const searchActorFromQuery = param => async (dispatch, getState) => {\n  const {\n    actorsReducer: {\n      page\n    }\n  } = getState();\n  dispatch(fetchActorsStart());\n  const url = `${API_BASE}search/person?${KEY}&page=${page}&query=${param}`;\n  const response = await fetch(url);\n\n  try {\n    if (response.ok) {\n      const {\n        results,\n        total_pages\n      } = await response.json();\n      dispatch(fetchActorsSuccess({\n        allActors: results,\n        totalPages: total_pages\n      }));\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n  }\n};","map":{"version":3,"sources":["/Users/alex/Documents/reactModul/React_films_app/src/store/actors/action.js"],"names":["API_BASE","KEY","URL_ACTORS","ACTORS_ACTION_TYPES","fetchActorsStart","type","FETCH_ACTORS_START","fetchActorsFailed","error","FETCH_ACTORS_FAILURE","payload","fetchActorsSuccess","actors","FETCH_ACTORS_SUCCESS","actorDescription","actor","GET_ACTOR_DESCRIPTION","setQueryWord","query","SET_QUERY_WORD","changePage","page","CHANGE_PAGE","fetchActors","dispatch","getState","actorsReducer","url","response","fetch","ok","results","total_pages","json","allActors","totalPages","e","console","fetchActorAbout","param","data","searchActorFromQuery"],"mappings":"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","sourcesContent":["import { API_BASE, KEY } from \"../../api/paths\";\nimport { URL_ACTORS } from \"./constants\";\nimport * as ACTORS_ACTION_TYPES from \"./types\";\n\nconst fetchActorsStart = () => ({\n  type: ACTORS_ACTION_TYPES.FETCH_ACTORS_START,\n});\n\nconst fetchActorsFailed = (error) => ({\n  type: ACTORS_ACTION_TYPES.FETCH_ACTORS_FAILURE,\n  payload: error,\n});\n\nconst fetchActorsSuccess = (actors) => ({\n  type: ACTORS_ACTION_TYPES.FETCH_ACTORS_SUCCESS,\n  payload: actors,\n});\nconst actorDescription = (actor) => ({\n  type: ACTORS_ACTION_TYPES.GET_ACTOR_DESCRIPTION,\n  payload: actor,\n});\nexport const setQueryWord = (query) => ({\n  type: ACTORS_ACTION_TYPES.SET_QUERY_WORD,\n  payload: query,\n});\nexport const changePage = (page) => ({\n  type: ACTORS_ACTION_TYPES.CHANGE_PAGE,\n  payload: page,\n});\n\nexport const fetchActors = () => async (dispatch, getState) => {\n  const {\n    actorsReducer: { page },\n  } = getState();\n  dispatch(fetchActorsStart());\n\n  const url = `${URL_ACTORS}${KEY}&page=${page}`;\n\n  const response = await fetch(url);\n\n  try {\n    if (response.ok) {\n      const { results, total_pages } = await response.json();\n\n      dispatch(\n        fetchActorsSuccess({ allActors: results, totalPages: total_pages })\n      );\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n    dispatch(fetchActorsFailed(\"Failed to load films!\"));\n  }\n};\n\nexport const fetchActorAbout = (param) => async (dispatch, getState) => {\n  dispatch(fetchActorsStart());\n\n  const url = `${API_BASE}person/${param}?${KEY}`;\n  const response = await fetch(url);\n  try {\n    if (response.ok) {\n      const data = await response.json();\n      dispatch(actorDescription(data));\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n  }\n};\nexport const searchActorFromQuery = (param) => async (dispatch, getState) => {\n  const {\n    actorsReducer: { page },\n  } = getState();\n  dispatch(fetchActorsStart());\n\n  const url = `${API_BASE}search/person?${KEY}&page=${page}&query=${param}`;\n  const response = await fetch(url);\n  try {\n    if (response.ok) {\n      const { results, total_pages } = await response.json();\n\n      dispatch(\n        fetchActorsSuccess({ allActors: results, totalPages: total_pages })\n      );\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}