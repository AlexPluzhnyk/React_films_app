{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/reactModul/React_films_app/src/components/SideBar/SideBar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Chip from \"../_shared/chip/Chip\";\nimport { DateRangeSelect } from \"../_shared/dateRangeSelect/DateRangeSelect\";\nimport ScoreLine from \"../_shared/scoreLine/ScoreLine\";\nimport ButtonCustom from \"../_shared/button/Button\";\nimport { fetchGenres, resetFilter, setFilter } from \"../../store/films/actions\";\nimport { fetchFilms } from \"../../store/films/actions\";\nimport { FILTER_NAMES } from \"../../store/films/constants\";\nimport BasicSelect from \"../_shared/basicSelect/BasicSelect\";\nimport \"./style.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SideBar = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    genres,\n    appliedFilters\n  } = useSelector(_ref => {\n    let {\n      filmsReducer: {\n        genres,\n        appliedFilters\n      }\n    } = _ref;\n    return {\n      genres,\n      appliedFilters\n    };\n  });\n\n  const enterFilter = () => {\n    dispatch(fetchFilms());\n  };\n\n  const clearFilters = () => {\n    dispatch(resetFilter());\n  };\n\n  useEffect(() => {\n    dispatch(fetchGenres());\n  }, [dispatch]);\n\n  const toggleGenres = id => {\n    const appliedGenres = appliedFilters[FILTER_NAMES.GENRE];\n\n    if (appliedGenres.includes(id)) {\n      const updatedAppliedFilters = appliedGenres.filter(genreId => genreId !== id);\n      dispatch(setFilter(FILTER_NAMES.GENRE, updatedAppliedFilters));\n      return;\n    }\n\n    dispatch(setFilter(FILTER_NAMES.GENRE, [...appliedGenres, id]));\n  };\n\n  const renderGenresChips = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"form__title\",\n        children: \"Select genres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__genres\",\n        children: genres.map(item => /*#__PURE__*/_jsxDEV(Chip, {\n          onClick: toggleGenres,\n          id: item.id,\n          label: item.name,\n          activeGenre: appliedFilters[FILTER_NAMES.GENRE].includes(item.id)\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n\n  const handlerDate = newValue => {\n    const [from, to] = newValue;\n    const date = [null, null];\n\n    if (from) {\n      const [formISOFormat] = from.toISOString().split(\"T\");\n      date[0] = formISOFormat;\n    }\n\n    if (to) {\n      const [toISOFormat] = to.toISOString().split(\"T\");\n      date[1] = toISOFormat;\n    }\n\n    dispatch(setFilter(FILTER_NAMES.RELEASE_FILMS, date));\n  };\n\n  const renderDateSelect = () => {\n    const value = appliedFilters[FILTER_NAMES.RELEASE_FILMS];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"form__title\",\n          children: \"Release dates\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DateRangeSelect, {\n          value: value,\n          handlerDate: handlerDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleRatingChange = _ref2 => {\n    let [from, to] = _ref2;\n    dispatch(setFilter(FILTER_NAMES.RATING_USERS, {\n      from,\n      to\n    }));\n  };\n\n  const renderUserRating = () => {\n    const {\n      from,\n      to\n    } = appliedFilters[FILTER_NAMES.RATING_USERS];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"form__title\",\n          children: \"User rating\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ScoreLine, {\n          from: from,\n          to: to,\n          handleChange: handleRatingChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleSortBy = _ref3 => {\n    let {\n      target: {\n        value\n      }\n    } = _ref3;\n    dispatch(setFilter(FILTER_NAMES.SORT_BY, value));\n  };\n\n  const renderFilterBy = () => {\n    const value = appliedFilters[FILTER_NAMES.SORT_BY];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"form__title\",\n          children: \"Sort by\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BasicSelect, {\n          value: value,\n          handleChange: handleSortBy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"side-bar\",\n    children: [renderGenresChips(), renderDateSelect(), renderUserRating(), renderFilterBy(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(ButtonCustom, {\n        onClick: enterFilter,\n        name: \"Apply filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonCustom, {\n        onClick: clearFilters,\n        name: \"Clear filter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SideBar, \"6BbKrSljUfVGm4E9LsuH91PXs5k=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = SideBar;\nexport default SideBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SideBar\");","map":{"version":3,"sources":["/Users/alex/Documents/reactModul/React_films_app/src/components/SideBar/SideBar.jsx"],"names":["React","useEffect","useDispatch","useSelector","Chip","DateRangeSelect","ScoreLine","ButtonCustom","fetchGenres","resetFilter","setFilter","fetchFilms","FILTER_NAMES","BasicSelect","SideBar","dispatch","genres","appliedFilters","filmsReducer","enterFilter","clearFilters","toggleGenres","id","appliedGenres","GENRE","includes","updatedAppliedFilters","filter","genreId","renderGenresChips","map","item","name","handlerDate","newValue","from","to","date","formISOFormat","toISOString","split","toISOFormat","RELEASE_FILMS","renderDateSelect","value","handleRatingChange","RATING_USERS","renderUserRating","handleSortBy","target","SORT_BY","renderFilterBy"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,SAASC,eAAT,QAAgC,4CAAhC;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,SAAnC,QAAoD,2BAApD;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AAEA,OAAO,cAAP;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAEc,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA6Bd,WAAW,CAC5C;AAAA,QAAC;AAAEe,MAAAA,YAAY,EAAE;AAAEF,QAAAA,MAAF;AAAUC,QAAAA;AAAV;AAAhB,KAAD;AAAA,WAAmD;AACjDD,MAAAA,MADiD;AAEjDC,MAAAA;AAFiD,KAAnD;AAAA,GAD4C,CAA9C;;AAOA,QAAME,WAAW,GAAG,MAAM;AACxBJ,IAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACD,GAFD;;AAGA,QAAMS,YAAY,GAAG,MAAM;AACzBL,IAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;AACD,GAFD;;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACP,WAAW,EAAZ,CAAR;AACD,GAFQ,EAEN,CAACO,QAAD,CAFM,CAAT;;AAIA,QAAMM,YAAY,GAAIC,EAAD,IAAQ;AAC3B,UAAMC,aAAa,GAAGN,cAAc,CAACL,YAAY,CAACY,KAAd,CAApC;;AAEA,QAAID,aAAa,CAACE,QAAd,CAAuBH,EAAvB,CAAJ,EAAgC;AAC9B,YAAMI,qBAAqB,GAAGH,aAAa,CAACI,MAAd,CAC3BC,OAAD,IAAaA,OAAO,KAAKN,EADG,CAA9B;AAGAP,MAAAA,QAAQ,CAACL,SAAS,CAACE,YAAY,CAACY,KAAd,EAAqBE,qBAArB,CAAV,CAAR;AACA;AACD;;AACDX,IAAAA,QAAQ,CAACL,SAAS,CAACE,YAAY,CAACY,KAAd,EAAqB,CAAC,GAAGD,aAAJ,EAAmBD,EAAnB,CAArB,CAAV,CAAR;AACD,GAXD;;AAaA,QAAMO,iBAAiB,GAAG,mBACxB;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,kBACGb,MAAM,CAACc,GAAP,CAAYC,IAAD,iBACV,QAAC,IAAD;AACE,UAAA,OAAO,EAAEV,YADX;AAGE,UAAA,EAAE,EAAEU,IAAI,CAACT,EAHX;AAIE,UAAA,KAAK,EAAES,IAAI,CAACC,IAJd;AAKE,UAAA,WAAW,EAAEf,cAAc,CAACL,YAAY,CAACY,KAAd,CAAd,CAAmCC,QAAnC,CAA4CM,IAAI,CAACT,EAAjD;AALf,WAEOS,IAAI,CAACT,EAFZ;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;;AAmBA,QAAMW,WAAW,GAAIC,QAAD,IAAc;AAChC,UAAM,CAACC,IAAD,EAAOC,EAAP,IAAaF,QAAnB;AACA,UAAMG,IAAI,GAAG,CAAC,IAAD,EAAO,IAAP,CAAb;;AAEA,QAAIF,IAAJ,EAAU;AACR,YAAM,CAACG,aAAD,IAAkBH,IAAI,CAACI,WAAL,GAAmBC,KAAnB,CAAyB,GAAzB,CAAxB;AACAH,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,aAAV;AACD;;AACD,QAAIF,EAAJ,EAAQ;AACN,YAAM,CAACK,WAAD,IAAgBL,EAAE,CAACG,WAAH,GAAiBC,KAAjB,CAAuB,GAAvB,CAAtB;AACAH,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUI,WAAV;AACD;;AACD1B,IAAAA,QAAQ,CAACL,SAAS,CAACE,YAAY,CAAC8B,aAAd,EAA6BL,IAA7B,CAAV,CAAR;AACD,GAbD;;AAeA,QAAMM,gBAAgB,GAAG,MAAM;AAC7B,UAAMC,KAAK,GAAG3B,cAAc,CAACL,YAAY,CAAC8B,aAAd,CAA5B;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,eAAD;AAAiB,UAAA,KAAK,EAAEE,KAAxB;AAA+B,UAAA,WAAW,EAAEX;AAA5C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GAVD;;AAYA,QAAMY,kBAAkB,GAAG,SAAgB;AAAA,QAAf,CAACV,IAAD,EAAOC,EAAP,CAAe;AACzCrB,IAAAA,QAAQ,CAACL,SAAS,CAACE,YAAY,CAACkC,YAAd,EAA4B;AAAEX,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAA5B,CAAV,CAAR;AACD,GAFD;;AAIA,QAAMW,gBAAgB,GAAG,MAAM;AAC7B,UAAM;AAAEZ,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAenB,cAAc,CAACL,YAAY,CAACkC,YAAd,CAAnC;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,SAAD;AAAW,UAAA,IAAI,EAAEX,IAAjB;AAAuB,UAAA,EAAE,EAAEC,EAA3B;AAA+B,UAAA,YAAY,EAAES;AAA7C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GAXD;;AAYA,QAAMG,YAAY,GAAG,SAA2B;AAAA,QAA1B;AAAEC,MAAAA,MAAM,EAAE;AAAEL,QAAAA;AAAF;AAAV,KAA0B;AAC9C7B,IAAAA,QAAQ,CAACL,SAAS,CAACE,YAAY,CAACsC,OAAd,EAAuBN,KAAvB,CAAV,CAAR;AACD,GAFD;;AAIA,QAAMO,cAAc,GAAG,MAAM;AAC3B,UAAMP,KAAK,GAAG3B,cAAc,CAACL,YAAY,CAACsC,OAAd,CAA5B;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,WAAD;AAAa,UAAA,KAAK,EAAEN,KAApB;AAA2B,UAAA,YAAY,EAAEI;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD,GAXD;;AAaA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,eACGnB,iBAAiB,EADpB,EAEGc,gBAAgB,EAFnB,EAGGI,gBAAgB,EAHnB,EAIGI,cAAc,EAJjB,eAME;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACE,QAAC,YAAD;AAAc,QAAA,OAAO,EAAEhC,WAAvB;AAAoC,QAAA,IAAI,EAAE;AAA1C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAc,QAAA,OAAO,EAAEC,YAAvB;AAAqC,QAAA,IAAI,EAAE;AAA3C;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA7HD;;GAAMN,O;UACaZ,W,EACkBC,W;;;KAF/BW,O;AA+HN,eAAeA,OAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Chip from \"../_shared/chip/Chip\";\nimport { DateRangeSelect } from \"../_shared/dateRangeSelect/DateRangeSelect\";\nimport ScoreLine from \"../_shared/scoreLine/ScoreLine\";\nimport ButtonCustom from \"../_shared/button/Button\";\nimport { fetchGenres, resetFilter, setFilter } from \"../../store/films/actions\";\nimport { fetchFilms } from \"../../store/films/actions\";\nimport { FILTER_NAMES } from \"../../store/films/constants\";\nimport BasicSelect from \"../_shared/basicSelect/BasicSelect\";\n\nimport \"./style.scss\";\n\nconst SideBar = () => {\n  const dispatch = useDispatch();\n  const { genres, appliedFilters } = useSelector(\n    ({ filmsReducer: { genres, appliedFilters } }) => ({\n      genres,\n      appliedFilters,\n    })\n  );\n\n  const enterFilter = () => {\n    dispatch(fetchFilms());\n  };\n  const clearFilters = () => {\n    dispatch(resetFilter());\n  };\n\n  useEffect(() => {\n    dispatch(fetchGenres());\n  }, [dispatch]);\n\n  const toggleGenres = (id) => {\n    const appliedGenres = appliedFilters[FILTER_NAMES.GENRE];\n\n    if (appliedGenres.includes(id)) {\n      const updatedAppliedFilters = appliedGenres.filter(\n        (genreId) => genreId !== id\n      );\n      dispatch(setFilter(FILTER_NAMES.GENRE, updatedAppliedFilters));\n      return;\n    }\n    dispatch(setFilter(FILTER_NAMES.GENRE, [...appliedGenres, id]));\n  };\n\n  const renderGenresChips = () => (\n    <div className=\"form\">\n      <div className=\"form__wrapper\">\n        <h4 className=\"form__title\">Select genres</h4>\n        <div className=\"form__genres\">\n          {genres.map((item) => (\n            <Chip\n              onClick={toggleGenres}\n              key={item.id}\n              id={item.id}\n              label={item.name}\n              activeGenre={appliedFilters[FILTER_NAMES.GENRE].includes(item.id)}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const handlerDate = (newValue) => {\n    const [from, to] = newValue;\n    const date = [null, null];\n\n    if (from) {\n      const [formISOFormat] = from.toISOString().split(\"T\");\n      date[0] = formISOFormat;\n    }\n    if (to) {\n      const [toISOFormat] = to.toISOString().split(\"T\");\n      date[1] = toISOFormat;\n    }\n    dispatch(setFilter(FILTER_NAMES.RELEASE_FILMS, date));\n  };\n\n  const renderDateSelect = () => {\n    const value = appliedFilters[FILTER_NAMES.RELEASE_FILMS];\n    return (\n      <div className=\"form\">\n        <div className=\"form__wrapper\">\n          <h4 className=\"form__title\">Release dates</h4>\n          <DateRangeSelect value={value} handlerDate={handlerDate} />\n        </div>\n      </div>\n    );\n  };\n\n  const handleRatingChange = ([from, to]) => {\n    dispatch(setFilter(FILTER_NAMES.RATING_USERS, { from, to }));\n  };\n\n  const renderUserRating = () => {\n    const { from, to } = appliedFilters[FILTER_NAMES.RATING_USERS];\n\n    return (\n      <div className=\"form\">\n        <div className=\"form__wrapper\">\n          <h4 className=\"form__title\">User rating</h4>\n          <ScoreLine from={from} to={to} handleChange={handleRatingChange} />\n        </div>\n      </div>\n    );\n  };\n  const handleSortBy = ({ target: { value } }) => {\n    dispatch(setFilter(FILTER_NAMES.SORT_BY, value));\n  };\n\n  const renderFilterBy = () => {\n    const value = appliedFilters[FILTER_NAMES.SORT_BY];\n\n    return (\n      <div className=\"form\">\n        <div className=\"form__wrapper\">\n          <h4 className=\"form__title\">Sort by</h4>\n          <BasicSelect value={value} handleChange={handleSortBy} />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"side-bar\">\n      {renderGenresChips()}\n      {renderDateSelect()}\n      {renderUserRating()}\n      {renderFilterBy()}\n\n      <div className=\"buttons-wrapper\">\n        <ButtonCustom onClick={enterFilter} name={\"Apply filter\"} />\n        <ButtonCustom onClick={clearFilters} name={\"Clear filter\"} />\n      </div>\n    </div>\n  );\n};\n\nexport default SideBar;\n"]},"metadata":{},"sourceType":"module"}