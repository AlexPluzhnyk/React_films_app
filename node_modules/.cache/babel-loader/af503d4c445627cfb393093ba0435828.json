{"ast":null,"code":"import * as FILMS_ACTION_TYPES from \"./types\";\nimport queryBuilder from \"../../api/queryBuilder\";\nimport { API_BASE, KEY, FETCH_GENRE } from \"../../api/paths\";\n\nconst fetchFilmsStart = () => ({\n  type: FILMS_ACTION_TYPES.FETCH_FILMS_START\n});\n\nconst fetchFilmsFailed = error => ({\n  type: FILMS_ACTION_TYPES.FETCH_FILMS_FAILURE,\n  payload: error\n});\n\nconst fetchFilmsSuccess = films => ({\n  type: FILMS_ACTION_TYPES.FETCH_FILMS_SUCCESS,\n  payload: films\n});\n\nconst filmDescription = description => ({\n  type: FILMS_ACTION_TYPES.FETCH_FILM_ABOUT,\n  payload: description\n});\n\nconst fetchGenresStart = () => ({\n  type: FILMS_ACTION_TYPES.FETCH_GENRES_START\n});\n\nconst fetchGenresFailed = error => ({\n  type: FILMS_ACTION_TYPES.FETCH_GENRES_FAILURE,\n  payload: error\n});\n\nconst fetchGenresSuccess = films => ({\n  type: FILMS_ACTION_TYPES.FETCH_GENRES_SUCCESS,\n  payload: films\n});\n\nexport const setFilter = (filterName, value) => ({\n  type: FILMS_ACTION_TYPES.SET_FILTER,\n  payload: {\n    filterName,\n    value\n  }\n});\nexport const resetFilter = () => ({\n  type: FILMS_ACTION_TYPES.RESET_FILTER\n});\nexport const setSearchWord = value => ({\n  type: FILMS_ACTION_TYPES.SET_SEARCH_WORD,\n  payload: value\n});\nexport const toggleFavoriteFilm = film => ({\n  type: FILMS_ACTION_TYPES.TOGGLE_FAVORITE,\n  payload: film\n});\nexport const removeFavoriteFilm = films => ({\n  type: FILMS_ACTION_TYPES.TOGGLE_FAVORITE,\n  payload: films\n});\nexport const resetPagination = page => ({\n  type: FILMS_ACTION_TYPES.TOGGLE_FAVORITE,\n  payload: page\n});\nexport const fetchFilms = isSearch => async (dispatch, getState) => {\n  dispatch(fetchFilmsStart());\n  const {\n    filmsReducer: {\n      appliedFilters,\n      searchWord\n    }\n  } = getState();\n  let url = \"\";\n\n  if (isSearch) {\n    dispatch(resetFilter());\n    url = queryBuilder(appliedFilters, searchWord);\n  } else {\n    dispatch(setSearchWord(\"\"));\n    url = queryBuilder(appliedFilters);\n  }\n\n  const response = await fetch(url);\n\n  try {\n    if (response.ok) {\n      const {\n        results,\n        total_pages\n      } = await response.json();\n      dispatch(fetchFilmsSuccess({\n        films: results,\n        totalPages: total_pages\n      }));\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n    dispatch(fetchFilmsFailed(\"Failed to load films!\"));\n  }\n};\nexport const fetchFilmAbout = param => async dispatch => {\n  dispatch(fetchFilmsStart());\n  const url = `${API_BASE}movie/${param}?${KEY}`;\n  const response = await fetch(url);\n\n  try {\n    if (response.ok) {\n      const data = await response.json();\n      dispatch(filmDescription(data));\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n  }\n};\nexport const fetchGenres = () => async dispatch => {\n  dispatch(fetchGenresStart());\n  const response = await fetch(`${FETCH_GENRE}`);\n\n  try {\n    if (response.ok) {\n      const data = await response.json();\n      dispatch(fetchGenresSuccess(data.genres));\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n    dispatch(fetchGenresFailed(\"Failed to load genres!\"));\n  }\n};","map":{"version":3,"sources":["/Users/alex/Documents/reactModul/React_films_app/src/store/films/actions.js"],"names":["FILMS_ACTION_TYPES","queryBuilder","API_BASE","KEY","FETCH_GENRE","fetchFilmsStart","type","FETCH_FILMS_START","fetchFilmsFailed","error","FETCH_FILMS_FAILURE","payload","fetchFilmsSuccess","films","FETCH_FILMS_SUCCESS","filmDescription","description","FETCH_FILM_ABOUT","fetchGenresStart","FETCH_GENRES_START","fetchGenresFailed","FETCH_GENRES_FAILURE","fetchGenresSuccess","FETCH_GENRES_SUCCESS","setFilter","filterName","value","SET_FILTER","resetFilter","RESET_FILTER","setSearchWord","SET_SEARCH_WORD","toggleFavoriteFilm","film","TOGGLE_FAVORITE","removeFavoriteFilm","resetPagination","page","fetchFilms","isSearch","dispatch","getState","filmsReducer","appliedFilters","searchWord","url","response","fetch","ok","results","total_pages","json","totalPages","e","console","fetchFilmAbout","param","data","fetchGenres","genres"],"mappings":"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","sourcesContent":["import * as FILMS_ACTION_TYPES from \"./types\";\nimport queryBuilder from \"../../api/queryBuilder\";\nimport { API_BASE, KEY, FETCH_GENRE } from \"../../api/paths\";\n\nconst fetchFilmsStart = () => ({\n  type: FILMS_ACTION_TYPES.FETCH_FILMS_START,\n});\n\nconst fetchFilmsFailed = (error) => ({\n  type: FILMS_ACTION_TYPES.FETCH_FILMS_FAILURE,\n  payload: error,\n});\n\nconst fetchFilmsSuccess = (films) => ({\n  type: FILMS_ACTION_TYPES.FETCH_FILMS_SUCCESS,\n  payload: films,\n});\nconst filmDescription = (description) => ({\n  type: FILMS_ACTION_TYPES.FETCH_FILM_ABOUT,\n  payload: description,\n});\n\nconst fetchGenresStart = () => ({\n  type: FILMS_ACTION_TYPES.FETCH_GENRES_START,\n});\n\nconst fetchGenresFailed = (error) => ({\n  type: FILMS_ACTION_TYPES.FETCH_GENRES_FAILURE,\n  payload: error,\n});\n\nconst fetchGenresSuccess = (films) => ({\n  type: FILMS_ACTION_TYPES.FETCH_GENRES_SUCCESS,\n  payload: films,\n});\n\nexport const setFilter = (filterName, value) => ({\n  type: FILMS_ACTION_TYPES.SET_FILTER,\n  payload: { filterName, value },\n});\n\nexport const resetFilter = () => ({\n  type: FILMS_ACTION_TYPES.RESET_FILTER,\n});\n\nexport const setSearchWord = (value) => ({\n  type: FILMS_ACTION_TYPES.SET_SEARCH_WORD,\n  payload: value,\n});\nexport const toggleFavoriteFilm = (film) => ({\n  type: FILMS_ACTION_TYPES.TOGGLE_FAVORITE,\n  payload: film,\n});\nexport const removeFavoriteFilm = (films) => ({\n  type: FILMS_ACTION_TYPES.TOGGLE_FAVORITE,\n  payload: films,\n});\nexport const resetPagination = (page) => ({\n  type: FILMS_ACTION_TYPES.TOGGLE_FAVORITE,\n  payload: page,\n});\n\nexport const fetchFilms = (isSearch) => async (dispatch, getState) => {\n  dispatch(fetchFilmsStart());\n  const {\n    filmsReducer: { appliedFilters, searchWord },\n  } = getState();\n\n  let url = \"\";\n\n  if (isSearch) {\n    dispatch(resetFilter());\n    url = queryBuilder(appliedFilters, searchWord);\n  } else {\n    dispatch(setSearchWord(\"\"));\n    url = queryBuilder(appliedFilters);\n  }\n\n  const response = await fetch(url);\n\n  try {\n    if (response.ok) {\n      const { results, total_pages } = await response.json();\n\n      dispatch(fetchFilmsSuccess({ films: results, totalPages: total_pages }));\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n    dispatch(fetchFilmsFailed(\"Failed to load films!\"));\n  }\n};\n\nexport const fetchFilmAbout = (param) => async (dispatch) => {\n  dispatch(fetchFilmsStart());\n\n  const url = `${API_BASE}movie/${param}?${KEY}`;\n  const response = await fetch(url);\n  try {\n    if (response.ok) {\n      const data = await response.json();\n      dispatch(filmDescription(data));\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n  }\n};\n\nexport const fetchGenres = () => async (dispatch) => {\n  dispatch(fetchGenresStart());\n\n  const response = await fetch(`${FETCH_GENRE}`);\n\n  try {\n    if (response.ok) {\n      const data = await response.json();\n      dispatch(fetchGenresSuccess(data.genres));\n\n      return;\n    }\n  } catch (e) {\n    console.error(\"Error: \", e);\n    dispatch(fetchGenresFailed(\"Failed to load genres!\"));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}