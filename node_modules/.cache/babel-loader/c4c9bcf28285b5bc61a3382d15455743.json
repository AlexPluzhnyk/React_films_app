{"ast":null,"code":"import * as ACTION_TYPES from \"./types\";\nimport { FILTER_NAMES } from \"./constants\";\nconst initialFilters = {\n  [FILTER_NAMES.GENRE]: [],\n  [FILTER_NAMES.RATING_USERS]: {\n    from: 0,\n    to: 10\n  },\n  [FILTER_NAMES.RELEASE_FILMS]: [null, null],\n  [FILTER_NAMES.SORT_BY]: \"\",\n  [FILTER_NAMES.PAGE]: 1\n};\nconst users = [{\n  login: \"admin@gmail.com\",\n  password: \"123456789\"\n}, {\n  login: \"eva@gmail.com\",\n  password: \"123456789\"\n}, {\n  login: \"ivan@gmail.com\",\n  password: \"123456789\"\n}, {\n  login: \"lisa@gmail.com\",\n  password: \"123456789\"\n}];\nconst initialState = {\n  films: [],\n  favoriteFilms: [],\n  isLoading: false,\n  errorMessage: \"\",\n  aboutFilm: {},\n  totalPages: 0,\n  genres: [],\n  searchWord: \"\",\n  appliedFilters: { ...initialFilters\n  },\n  users: [...users]\n};\nexport default function filmsReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_FILMS_START:\n      return { ...state,\n        isLoading: true,\n        errorMessage: \"\"\n      };\n\n    case ACTION_TYPES.FETCH_FILMS_SUCCESS:\n      const {\n        films,\n        totalPages\n      } = action.payload;\n      return { ...state,\n        isLoading: false,\n        films,\n        totalPages\n      };\n\n    case ACTION_TYPES.FETCH_FILMS_FAILURE:\n      return { ...state,\n        isLoading: false,\n        errorMessage: action.payload\n      };\n\n    case ACTION_TYPES.FETCH_FILM_ABOUT:\n      return { ...state,\n        aboutFilm: action.payload,\n        isLoading: false\n      };\n\n    case ACTION_TYPES.FETCH_GENRES_START:\n      return { ...state,\n        isLoading: true,\n        errorMessage: \"\"\n      };\n\n    case ACTION_TYPES.FETCH_GENRES_SUCCESS:\n      return { ...state,\n        isLoading: false,\n        genres: action.payload\n      };\n\n    case ACTION_TYPES.FETCH_GENRES_FAILURE:\n      return { ...state,\n        isLoading: false,\n        errorMessage: action.payload\n      };\n\n    case ACTION_TYPES.SET_FILTER:\n      const {\n        filterName,\n        value\n      } = action.payload;\n      return { ...state,\n        appliedFilters: { ...state.appliedFilters,\n          [filterName]: value\n        }\n      };\n\n    case ACTION_TYPES.RESET_FILTER:\n      return { ...state,\n        appliedFilters: initialFilters\n      };\n\n    case ACTION_TYPES.SET_SEARCH_WORD:\n      return { ...state,\n        searchWord: action.payload\n      };\n\n    case ACTION_TYPES.TOGGLE_FAVORITE:\n      const film = action.payload;\n      const isAlreadyExistInFavorite = state.favoriteFilms.find(_ref => {\n        let {\n          id\n        } = _ref;\n        return id === film.id;\n      });\n      const updatedFilms = isAlreadyExistInFavorite ? state.favoriteFilms.filter(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return id !== film.id;\n      }) : [...state.favoriteFilms, film];\n      return { ...state,\n        favoriteFilms: updatedFilms\n      };\n\n    case ACTION_TYPES.REMOVE_FAVORITE_FILM:\n      const filmId = action.payload;\n      const favorite = state.favoriteFilms.filter(_ref3 => {\n        let {\n          id\n        } = _ref3;\n        return id !== filmId.id;\n      });\n      return { ...state,\n        favoriteFilms: favorite\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/alex/Documents/reactModul/React_films_app/src/store/films/reducer.js"],"names":["ACTION_TYPES","FILTER_NAMES","initialFilters","GENRE","RATING_USERS","from","to","RELEASE_FILMS","SORT_BY","PAGE","users","login","password","initialState","films","favoriteFilms","isLoading","errorMessage","aboutFilm","totalPages","genres","searchWord","appliedFilters","filmsReducer","state","action","type","FETCH_FILMS_START","FETCH_FILMS_SUCCESS","payload","FETCH_FILMS_FAILURE","FETCH_FILM_ABOUT","FETCH_GENRES_START","FETCH_GENRES_SUCCESS","FETCH_GENRES_FAILURE","SET_FILTER","filterName","value","RESET_FILTER","SET_SEARCH_WORD","TOGGLE_FAVORITE","film","isAlreadyExistInFavorite","find","id","updatedFilms","filter","REMOVE_FAVORITE_FILM","filmId","favorite"],"mappings":"AAAA,OAAO,KAAKA,YAAZ,MAA8B,SAA9B;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,MAAMC,cAAc,GAAG;AACrB,GAACD,YAAY,CAACE,KAAd,GAAsB,EADD;AAErB,GAACF,YAAY,CAACG,YAAd,GAA6B;AAC3BC,IAAAA,IAAI,EAAE,CADqB;AAE3BC,IAAAA,EAAE,EAAE;AAFuB,GAFR;AAMrB,GAACL,YAAY,CAACM,aAAd,GAA8B,CAAC,IAAD,EAAO,IAAP,CANT;AAOrB,GAACN,YAAY,CAACO,OAAd,GAAwB,EAPH;AAQrB,GAACP,YAAY,CAACQ,IAAd,GAAqB;AARA,CAAvB;AAUA,MAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CADY,EAKZ;AACED,EAAAA,KAAK,EAAE,eADT;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CALY,EASZ;AACED,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CATY,EAaZ;AACED,EAAAA,KAAK,EAAE,gBADT;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CAbY,CAAd;AAmBA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,aAAa,EAAE,EAFI;AAGnBC,EAAAA,SAAS,EAAE,KAHQ;AAInBC,EAAAA,YAAY,EAAE,EAJK;AAKnBC,EAAAA,SAAS,EAAE,EALQ;AAMnBC,EAAAA,UAAU,EAAE,CANO;AAOnBC,EAAAA,MAAM,EAAE,EAPW;AAQnBC,EAAAA,UAAU,EAAE,EARO;AASnBC,EAAAA,cAAc,EAAE,EAAE,GAAGpB;AAAL,GATG;AAUnBQ,EAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ;AAVY,CAArB;AAaA,eAAe,SAASa,YAAT,GAAoD;AAAA,MAA9BC,KAA8B,uEAAtBX,YAAsB;AAAA,MAARY,MAAQ;;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK1B,YAAY,CAAC2B,iBAAlB;AACE,aAAO,EACL,GAAGH,KADE;AAELR,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,YAAY,EAAE;AAHT,OAAP;;AAMF,SAAKjB,YAAY,CAAC4B,mBAAlB;AACE,YAAM;AAAEd,QAAAA,KAAF;AAASK,QAAAA;AAAT,UAAwBM,MAAM,CAACI,OAArC;AACA,aAAO,EACL,GAAGL,KADE;AAELR,QAAAA,SAAS,EAAE,KAFN;AAGLF,QAAAA,KAHK;AAILK,QAAAA;AAJK,OAAP;;AAMF,SAAKnB,YAAY,CAAC8B,mBAAlB;AACE,aAAO,EACL,GAAGN,KADE;AAELR,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,YAAY,EAAEQ,MAAM,CAACI;AAHhB,OAAP;;AAKF,SAAK7B,YAAY,CAAC+B,gBAAlB;AACE,aAAO,EACL,GAAGP,KADE;AAELN,QAAAA,SAAS,EAAEO,MAAM,CAACI,OAFb;AAGLb,QAAAA,SAAS,EAAE;AAHN,OAAP;;AAKF,SAAKhB,YAAY,CAACgC,kBAAlB;AACE,aAAO,EACL,GAAGR,KADE;AAELR,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,YAAY,EAAE;AAHT,OAAP;;AAKF,SAAKjB,YAAY,CAACiC,oBAAlB;AACE,aAAO,EACL,GAAGT,KADE;AAELR,QAAAA,SAAS,EAAE,KAFN;AAGLI,QAAAA,MAAM,EAAEK,MAAM,CAACI;AAHV,OAAP;;AAKF,SAAK7B,YAAY,CAACkC,oBAAlB;AACE,aAAO,EACL,GAAGV,KADE;AAELR,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,YAAY,EAAEQ,MAAM,CAACI;AAHhB,OAAP;;AAKF,SAAK7B,YAAY,CAACmC,UAAlB;AACE,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAAwBZ,MAAM,CAACI,OAArC;AACA,aAAO,EACL,GAAGL,KADE;AAELF,QAAAA,cAAc,EAAE,EACd,GAAGE,KAAK,CAACF,cADK;AAEd,WAACc,UAAD,GAAcC;AAFA;AAFX,OAAP;;AAOF,SAAKrC,YAAY,CAACsC,YAAlB;AACE,aAAO,EACL,GAAGd,KADE;AAELF,QAAAA,cAAc,EAAEpB;AAFX,OAAP;;AAIF,SAAKF,YAAY,CAACuC,eAAlB;AACE,aAAO,EACL,GAAGf,KADE;AAELH,QAAAA,UAAU,EAAEI,MAAM,CAACI;AAFd,OAAP;;AAIF,SAAK7B,YAAY,CAACwC,eAAlB;AACE,YAAMC,IAAI,GAAGhB,MAAM,CAACI,OAApB;AACA,YAAMa,wBAAwB,GAAGlB,KAAK,CAACT,aAAN,CAAoB4B,IAApB,CAC/B;AAAA,YAAC;AAAEC,UAAAA;AAAF,SAAD;AAAA,eAAYA,EAAE,KAAKH,IAAI,CAACG,EAAxB;AAAA,OAD+B,CAAjC;AAGA,YAAMC,YAAY,GAAGH,wBAAwB,GACzClB,KAAK,CAACT,aAAN,CAAoB+B,MAApB,CAA2B;AAAA,YAAC;AAAEF,UAAAA;AAAF,SAAD;AAAA,eAAYA,EAAE,KAAKH,IAAI,CAACG,EAAxB;AAAA,OAA3B,CADyC,GAEzC,CAAC,GAAGpB,KAAK,CAACT,aAAV,EAAyB0B,IAAzB,CAFJ;AAIA,aAAO,EACL,GAAGjB,KADE;AAELT,QAAAA,aAAa,EAAE8B;AAFV,OAAP;;AAIF,SAAK7C,YAAY,CAAC+C,oBAAlB;AACE,YAAMC,MAAM,GAAGvB,MAAM,CAACI,OAAtB;AACA,YAAMoB,QAAQ,GAAGzB,KAAK,CAACT,aAAN,CAAoB+B,MAApB,CAA2B;AAAA,YAAC;AAAEF,UAAAA;AAAF,SAAD;AAAA,eAAYA,EAAE,KAAKI,MAAM,CAACJ,EAA1B;AAAA,OAA3B,CAAjB;AACA,aAAO,EACL,GAAGpB,KADE;AAELT,QAAAA,aAAa,EAAEkC;AAFV,OAAP;;AAKF;AACE,aAAOzB,KAAP;AAvFJ;AAyFD","sourcesContent":["import * as ACTION_TYPES from \"./types\";\nimport { FILTER_NAMES } from \"./constants\";\n\nconst initialFilters = {\n  [FILTER_NAMES.GENRE]: [],\n  [FILTER_NAMES.RATING_USERS]: {\n    from: 0,\n    to: 10,\n  },\n  [FILTER_NAMES.RELEASE_FILMS]: [null, null],\n  [FILTER_NAMES.SORT_BY]: \"\",\n  [FILTER_NAMES.PAGE]: 1,\n};\nconst users = [\n  {\n    login: \"admin@gmail.com\",\n    password: \"123456789\",\n  },\n  {\n    login: \"eva@gmail.com\",\n    password: \"123456789\",\n  },\n  {\n    login: \"ivan@gmail.com\",\n    password: \"123456789\",\n  },\n  {\n    login: \"lisa@gmail.com\",\n    password: \"123456789\",\n  },\n];\n\nconst initialState = {\n  films: [],\n  favoriteFilms: [],\n  isLoading: false,\n  errorMessage: \"\",\n  aboutFilm: {},\n  totalPages: 0,\n  genres: [],\n  searchWord: \"\",\n  appliedFilters: { ...initialFilters },\n  users: [...users],\n};\n\nexport default function filmsReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_FILMS_START:\n      return {\n        ...state,\n        isLoading: true,\n        errorMessage: \"\",\n      };\n\n    case ACTION_TYPES.FETCH_FILMS_SUCCESS:\n      const { films, totalPages } = action.payload;\n      return {\n        ...state,\n        isLoading: false,\n        films,\n        totalPages,\n      };\n    case ACTION_TYPES.FETCH_FILMS_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        errorMessage: action.payload,\n      };\n    case ACTION_TYPES.FETCH_FILM_ABOUT:\n      return {\n        ...state,\n        aboutFilm: action.payload,\n        isLoading: false,\n      };\n    case ACTION_TYPES.FETCH_GENRES_START:\n      return {\n        ...state,\n        isLoading: true,\n        errorMessage: \"\",\n      };\n    case ACTION_TYPES.FETCH_GENRES_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        genres: action.payload,\n      };\n    case ACTION_TYPES.FETCH_GENRES_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        errorMessage: action.payload,\n      };\n    case ACTION_TYPES.SET_FILTER:\n      const { filterName, value } = action.payload;\n      return {\n        ...state,\n        appliedFilters: {\n          ...state.appliedFilters,\n          [filterName]: value,\n        },\n      };\n    case ACTION_TYPES.RESET_FILTER:\n      return {\n        ...state,\n        appliedFilters: initialFilters,\n      };\n    case ACTION_TYPES.SET_SEARCH_WORD:\n      return {\n        ...state,\n        searchWord: action.payload,\n      };\n    case ACTION_TYPES.TOGGLE_FAVORITE:\n      const film = action.payload;\n      const isAlreadyExistInFavorite = state.favoriteFilms.find(\n        ({ id }) => id === film.id\n      );\n      const updatedFilms = isAlreadyExistInFavorite\n        ? state.favoriteFilms.filter(({ id }) => id !== film.id)\n        : [...state.favoriteFilms, film];\n\n      return {\n        ...state,\n        favoriteFilms: updatedFilms,\n      };\n    case ACTION_TYPES.REMOVE_FAVORITE_FILM:\n      const filmId = action.payload;\n      const favorite = state.favoriteFilms.filter(({ id }) => id !== filmId.id);\n      return {\n        ...state,\n        favoriteFilms: favorite,\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}